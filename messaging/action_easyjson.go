// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package messaging

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson_c83507a6_decode_github_com_heynemann_level_messaging_Action(in *jlexer.Lexer, out *Action) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SessionID":
			out.SessionID = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Key":
			out.Key = string(in.String())
		case "Timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "Payload":
			out.Payload = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_c83507a6_encode_github_com_heynemann_level_messaging_Action(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"SessionID\":")
	out.String(string(in.SessionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Key\":")
	out.String(string(in.Key))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Timestamp\":")
	out.Raw((in.Timestamp).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Payload\":")
	out.Raw(json.Marshal(in.Payload))
	out.RawByte('}')
}
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_c83507a6_encode_github_com_heynemann_level_messaging_Action(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_c83507a6_encode_github_com_heynemann_level_messaging_Action(w, v)
}
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_c83507a6_decode_github_com_heynemann_level_messaging_Action(&r, v)
	return r.Error()
}
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_c83507a6_decode_github_com_heynemann_level_messaging_Action(l, v)
}
