// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package messaging

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_c83507a6_decode_github_com_heynemann_level_messaging_Action(in *jlexer.Lexer, out *Action) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "Payload":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Payload = make(map[string]interface{})
				} else {
					out.Payload = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					v1 = in.Interface()
					(out.Payload)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_c83507a6_encode_github_com_heynemann_level_messaging_Action(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Timestamp\":")
	out.Raw((in.Timestamp).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Payload\":")
	if in.Payload == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2_first := true
		for v2_name, v2_value := range in.Payload {
			if !v2_first {
				out.RawByte(',')
			}
			v2_first = false
			out.String(string(v2_name))
			out.RawByte(':')
			out.Raw(json.Marshal(v2_value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_c83507a6_encode_github_com_heynemann_level_messaging_Action(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_c83507a6_encode_github_com_heynemann_level_messaging_Action(w, v)
}
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_c83507a6_decode_github_com_heynemann_level_messaging_Action(&r, v)
	return r.Error()
}
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_c83507a6_decode_github_com_heynemann_level_messaging_Action(l, v)
}
